#
# Usage Notes:
# - Provides only field names and descriptions
# - All default values are set by `guard` in PATH Helm Chart's `values.yaml`
# - Reference: https://github.com/buildwithgrove/helm-charts/blob/main/charts/path/values.yaml
#
fullnameOverride: guard
global:
  namespace: path
  serviceName: path-http
  port: 3069

  # Optional health check configuration
  # - Override settings for health check endpoint
  # - Defaults to global values when not specified
  healthCheck:
    serviceName: path-http       # Service to target for health checks (defaults to global.serviceName)
    namespace: path             # Namespace for health check service (defaults to global.namespace)
    port: 3069                  # Port for health check service (defaults to global.port)
    path: "/healthz"           # Path for health checks (defaults to "/healthz")

  # Settings for traffic shifting
  shannonBetaNamespace: middleware
  shannonMainnetNamespace: middleware

  shannonBetaServiceName: middleware-http
  shannonMainnetServiceName: shannon-mainnet-http

  shannonBetaPort: 8080
  shannonMainnetPort: 8080

# Default health check configuration
# - Can be overridden by parent chart if needed
# - Uses global values as defaults
healthCheck:
  serviceName: # Will default to global.serviceName in template
  namespace:   # Will default to global.namespace in template
  port:        # Will default to global.port in template
  path: "/healthz"

# Optional health check configuration
# - Override settings for health check endpoint
# - Defaults to global values when not specified
# healthCheck:
#   serviceName: path-http       # Service to target for health checks (defaults to global.serviceName)
#   namespace: path             # Namespace for health check service (defaults to global.namespace)
#   port: 3069                  # Port for health check service (defaults to global.port)
#   path: "/healthz"           # Path for health checks (defaults to "/healthz")

# Optional disqualified endpoints configuration
# - Override settings for the disqualified endpoints route
# - Defaults to global values when not specified
# disqualifiedEndpoints:
#   serviceName: path-http       # Service to target (defaults to global.serviceName)
#   namespace: path             # Namespace for the service (defaults to global.namespace)
#   port: 3069                  # Port for the service (defaults to global.port)
#   path: "/disqualified_endpoints" # Path for the route (defaults to "/disqualified_endpoints")

gateway:
  port: 3070
# Gateway parent references for HTTPRoutes
# - Used for HTTPRoute parentRefs
# - Update as needed for your deployment

gatewayRef:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: guard-envoy-gateway
# IMPORTANT:
# - Update `domain` value
# - Must be specified in HTTPRoute resources for routing
# - Must match Host header in HTTP requests to GUARD/Envoy Gateway

domain: "example.com"
# IMPORTANT:
# - Specify at least one service or Envoy Gateway will not accept requests

# Optional:
# - Set `regionName` to add Auth-Region header to requests
# regionName: ""

# GUARD services configuration
# - Services defined here will be used to create HTTPRoutes for each service
#   - Supports both Subdomain and Header-based routing
# - For more information, see:
#   - https://path.grove.city/operate/helm/guard#routing
# services:
# - serviceId: eth
#   aliases:
#     - eth
#     - eth-mainnet
#   trafficSplitting:
#     enabled: true
#     weights:
#       path: 60
#       shannonBeta: 30
#       shannonMainnet: 20
#     # Optional: External endpoints for traffic splitting
#     external:
#       - hostname: "144.202.52.147"
#         port: 8545
#         weight: 10
#       - hostname: "external-provider.com"
#         port: 443
#         weight: 5
#   failover:
#     enabled: false
#     fallbackUrl: "http://example.com:8545"
#     # Optional: Custom Backend spec for fallback endpoint
#     # Reference: https://gateway.envoyproxy.io/latest/api/extension_types/#backend
#     backendSpec: {}
#       # Example: Add circuit breaker
#       # circuitBreaker:
#       #   maxConnections: 1024
#       #   maxPendingRequests: 64
#     # Optional: Custom BackendTrafficPolicy spec for health checking
#     # Reference: https://gateway.envoyproxy.io/latest/api/extension_types/#backendtrafficpolicy
#     trafficPolicySpec: {}
#       # Example: Passive health check (default)
#       # healthCheck:
#       #   passive:
#       #     baseEjectionTime: 30s
#       #     interval: 10s
#       #     maxEjectionPercent: 100
#       #     consecutive5XxErrors: 3
#       #     consecutiveGatewayErrors: 3
#       #     consecutiveLocalOriginFailures: 3
#       #     splitExternalLocalOriginErrors: false
#       # Example: Active health check
#       # healthCheck:
#       #   active:
#       #     timeout: 1s
#       #     interval: 3s
#       #     unhealthyThreshold: 3
#       #     healthyThreshold: 2
#       #     http:
#       #       path: "/healthz"

# GUARD auth configuration
# Exactly one auth method must be enabled:
# - API Key (apiKey)
# - Grove Legacy (groveLegacy)
#
# IMPORTANT:
# - If both are enabled, k8s will throw an error due to duplicate HTTPRoute resources being created for each service.
#
# For more information, see:
#   - https://path.grove.city/operate/helm/guard#authentication
auth:
  # Debug endpoints authentication configuration
  # - Presence of this section enables external exposure of PATH's debug endpoints via GUARD
  # - Creates HTTPRoute and SecurityPolicy for debug endpoints with separate authentication
  # - Covers both pprof endpoints (served on port 6060) and disqualified_endpoints (served on port 3069)
  # - Uses API key authentication (separate from main API key auth) for security isolation
  debug_endpoints:
    # Kubernetes secret name containing debug API key
    # Secret should contain 'path-debug-api-key' key with the debug API key value
    # In local development: created by Tilt from secrets.yaml (value: "test_debug_api_key")
    # In production: created by external secret management system
    api_key_secret_name: "path-debug-api-keys"

  #
  # 1. API Key auth configuration (default)
  apiKey:
    enabled: true
    headerKey: "authorization"
    apiKeys:
      - test_api_key

  # 2. Grove Legacy auth configuration (Grove Portal only)
  # VERY IMPORTANT:
  # - Only use if authorizing Grove Portal requests
  # - Otherwise, this likely does not fit your use-case
  #
  # DEV_NOTE:
  # - This section is intentionally not included in the PATH chart's `values.yaml` file
  # - Applies only to the Grove Portal as a legacy configuration
  groveLegacy:
    enabled: false
    peas:
      enabled: false
      imageTag: "latest"
      mountPath: /app/data
      replicas: 1
      port: 10001
      env:
        # PEAS default port is 10001
        # - name: PORT
        #   value: "10001"
        # Replace this value with your database connection string
        # - name: POSTGRES_CONNECTION_STRING
        #   value: "postgres://postgres:postgres@localhost:5432/postgres"
      # PEAS may load configuration for its database connection in one of two ways:
      #   1. From a Kubernetes secret (production)
      #      fromSecret:
      #        secretName: peas-config
      #   2. From a ConfigMap (local development)
      #      (used for local development purposes)
      #      configMap:
      #        ssl_cert.pem: |
      #          -----BEGIN CERTIFICATE-----
      #        ssl_key.pem: |
      #          -----BEGIN PRIVATE KEY-----
      #        ssl_root_cert.pem: |
      #          -----BEGIN CERTIFICATE-----
      # Additional secrets can be mounted as volumes:
      # secretMounts:
      #   - name: tls-certs
      #     secretName: peas-tls-secret
      #     mountPath: /etc/tls
      #     readOnly: true
      #   - name: api-keys
      #     secretName: api-keys-secret
      #     mountPath: /etc/api-keys
      #     readOnly: true
      #     # Optional: mount specific keys from the secret
      #     items:
      #       - key: production.key
      #         path: prod.key
      #         mode: 0400

# Envoy Gateway configuration
# - Use this section to configure gateway-helm dependency
# - Uncomment `gateway-helm` to specify config
# - Values here override defaults
#
# References:
# - https://github.com/envoyproxy/gateway/tree/main/charts/gateway-helm#values
# - https://github.com/envoyproxy/gateway/blob/main/charts/gateway-helm/values.tmpl.yaml
#
# Failover Configuration API References:
# - Backend CRD: https://gateway.envoyproxy.io/latest/api/extension_types/#backend
# - BackendTrafficPolicy CRD: https://gateway.envoyproxy.io/latest/api/extension_types/#backendtrafficpolicy
# - Health Checking Guide: https://gateway.envoyproxy.io/latest/tasks/traffic/backend-healthchecking/
# - Failover Guide: https://gateway.envoyproxy.io/latest/tasks/traffic/backend-failover/

# Gateway Helm configuration commented out in default values.yaml to avoid the error 
# "cannot overwrite table with non-table (map[string]interface {})" when running PATH Localnet.
# If required for the production deployment, this section should be set in the production values.yaml file.
# gateway-helm:
#   config:
#     envoyGateway:
#       # Enable Backend resources for failover functionality
#       extensionManager:
#         resources:
#           - group: gateway.envoyproxy.io
#             version: v1alpha1
#             kind: Backend
#       extensionApis:
#         # Required to support traffic splitting to external endpoints (they are defined as "Backend")
#         enableBackend: true

# Envoy Gateway configuration
envoyGateway:
  enabled: true
  serviceType: ClusterIP

# Controls deployment of Gateway API resources (Gateway, GatewayClass, EnvoyProxy)
gatewayResources:
  enabled: true

# Controls ReferenceGrant for middleware namespace
shannonNamespaceReferenceGrant:
  enabled: false