#
# Usage Notes:
# - Provides only field names and descriptions
# - All default values are set by `guard` in PATH Helm Chart's `values.yaml`
# - Reference: https://github.com/buildwithgrove/helm-charts/blob/main/charts/path/values.yaml
#
fullnameOverride: guard
global:
  namespace: path
  serviceName: path-http
  port: 3069

# Optional health check configuration
# - Override settings for health check endpoint
# - Defaults to global values when not specified
# healthCheck:
#   serviceName: path-http       # Service to target for health checks (defaults to global.serviceName)
#   namespace: path             # Namespace for health check service (defaults to global.namespace)
#   port: 3069                  # Port for health check service (defaults to global.port)
#   path: "/healthz"           # Path for health checks (defaults to "/healthz")

  # Settings for traffic shifting
  shannonBetaNamespace: middleware
  shannonMainnetNamespace: middleware

  shannonBetaServiceName: middleware-http
  shannonMainnetServiceName: shannon-mainnet-http

  shannonBetaPort: 8080
  shannonMainnetPort: 8080
gateway:
  port: 3070
# Gateway parent references for HTTPRoutes
# - Used for HTTPRoute parentRefs
# - Update as needed for your deployment

gatewayRef:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: guard-envoy-gateway
# IMPORTANT:
# - Update `domain` value
# - Must be specified in HTTPRoute resources for routing
# - Must match Host header in HTTP requests to GUARD/Envoy Gateway

domain: "example.com"
# IMPORTANT:
# - Specify at least one service or Envoy Gateway will not accept requests

# Optional:
# - Set `regionName` to add Auth-Region header to requests
# regionName: "us-east-1"

# GUARD services configuration
# - Services defined here will be used to create HTTPRoutes for each service
#   - Supports both Subdomain and Header-based routing
# - For more information, see:
#   - https://path.grove.city/operate/helm/guard#routing
services:
  # Morse-specific services
  - serviceId: F00C
    shannonServiceId: eth
    aliases:
      - eth
      - eth-mainnet
    # trafficSplitting:
    #   enabled: true
    #   weights:
    #     path: 60
    #     shannonBeta: 30
    #     shannonMainnet: 20

# GUARD auth configuration
# Exactly one auth method must be enabled:
# - API Key (apiKey)
# - Grove Legacy (groveLegacy)
#
# IMPORTANT:
# - If both are enabled, k8s will throw an error due to duplicate HTTPRoute resources being created for each service.
#
# For more information, see:
#   - https://path.grove.city/operate/helm/guard#authentication
auth:
  #
  # 1. API Key auth configuration (default)
  apiKey:
    enabled: true
    headerKey: "authorization"
    apiKeys:
      - test_api_key

  # 2. Grove Legacy auth configuration (Grove Portal only)
  # VERY IMPORTANT:
  # - Only use if authorizing Grove Portal requests
  # - Otherwise, this likely does not fit your use-case
  #
  # DEV_NOTE:
  # - This section is intentionally not included in the PATH chart's `values.yaml` file
  # - Applies only to the Grove Portal as a legacy configuration
  groveLegacy:
    enabled: false
    peas:
      enabled: false
      imageTag: "latest"
      mountPath: /app/data
      replicas: 1
      port: 10001
      env:
        # PEAS default port is 10001
        # - name: PORT
        #   value: "10001"
        # Replace this value with your database connection string
        # - name: POSTGRES_CONNECTION_STRING
        #   value: "postgres://postgres:postgres@localhost:5432/postgres"
      # PEAS may load configuration for its database connection in one of two ways:
      #   1. From a Kubernetes secret (production)
      #      fromSecret:
      #        secretName: peas-config
      #   2. From a ConfigMap (local development)
      #      (used for local development purposes)
      #      configMap:
      #        ssl_cert.pem: |
      #          -----BEGIN CERTIFICATE-----
      #        ssl_key.pem: |
      #          -----BEGIN PRIVATE KEY-----
      #        ssl_root_cert.pem: |
      #          -----BEGIN CERTIFICATE-----

# Rate Limit configuration
# - Controls rate limiting for requests
# - Redis can be deployed or use external
# - Define all plan details below
# - Requests are matched per-header as configured
#
# Envoy Gateway Documentation:
# - https://gateway.envoyproxy.io/latest/tasks/traffic/global-rate-limit/#rate-limit-distinct-users-except-admin
rateLimit:
  # Set to true to enable rate limiting
  enabled: true

  # Redis deployment control
  redis:
    # Set to false to use external Redis
    enabled: true

  # Rate limit plans
  plans:
    # The headers set here must match the headers that are set on requests inside PEAS:
    # - https://github.com/buildwithgrove/path-external-auth-server/blob/main/ratelimit/ratelimit.go
    # PLAN_FREE: 5000 requests per day
    - header: "Rl-Plan-Free"
      requests: 5000
      unit: Day

# Envoy Gateway configuration
# - Use this section to configure gateway-helm dependency
# - Uncomment `gateway-helm` to specify config
# - Values here override defaults
#
# References:
# - https://github.com/envoyproxy/gateway/tree/main/charts/gateway-helm#values
# - https://github.com/envoyproxy/gateway/blob/main/charts/gateway-helm/values.tmpl.yaml

gateway-helm:
  config:
    envoyGateway:
      # Required to enable rate limiting via Redis backend
      # DEV_NOTE: If redis.enabled is false, update this to point to external Redis
      rateLimit:
        backend:
          type: Redis
          redis:
            # URL for Redis service deployed by this chart in `path` namespace (used by Envoy Gateway)
            url: redis:6379

# Envoy Gateway configuration
envoyGateway:
  enabled: true
  serviceType: ClusterIP

# Controls deployment of Gateway API resources (Gateway, GatewayClass, EnvoyProxy)
gatewayResources:
  enabled: true

# Controls ReferenceGrant for middleware namespace
shannonNamespaceReferenceGrant:
  enabled: false
