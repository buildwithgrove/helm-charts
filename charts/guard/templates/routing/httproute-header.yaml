# HTTPRoute Generator for Services
#
# Generates HTTPRoute resources for each service in the `services` list, configuring routing
# based on the target-service-id header.
#
# Ref: https://gateway.envoyproxy.io/latest/api/gateway_api/httproute/
#
# Routing behavior:
#   - Creates one HTTPRoute per service that handles both the service ID and all aliases
#   - Routes requests based on the `target-service-id` header
#   - For aliases, modifies the header to use the authoritative service ID
#
# Example configuration, as defined in `values.yaml` at `guard.services`:
# services:
#   - serviceId: eth
#     aliases:
#       - eth-mainnet
#   - serviceId: polygon
#     aliases:
#       - matic
#
# This configuration would match requests to:
#   - https://rpc.path.com/v1
# For any of the following headers:
#   -H "target-service-id: eth"         -> "target-service-id: eth"
#   -H "target-service-id: eth-mainnet" -> "target-service-id: eth"
#
#   -H "target-service-id: polygon"     -> "target-service-id: polygon"
#   -H "target-service-id: matic"       -> "target-service-id: polygon"
#
# In the case of a match based on an alias, the header
# will be set to the authoritative service ID.

{{- $gwname:= default "guard" $.Values.fullnameOverride }}
{{- $name:= include "guard-helm.fullname" . }}

{{- range .Values.services }}
{{- $service := . }}
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute

metadata:
  # eg. eth-header-route
  name: {{ $service.serviceId | lower }}-header-route
  namespace: {{ $.Values.global.namespace }}

spec:
  parentRefs:
  {{- range $.Values.gatewayRef }}
  - group: {{ .group }}
    kind: {{ .kind }}
    name: {{ .name }}
  {{- end }}

  rules:
  # Rule for the service ID itself (no header modification needed)
  - backendRefs:
    - group: ""
      kind: Service
      name: {{ $.Values.global.serviceName }}
      namespace: {{ $.Values.global.namespace }}
      port: {{ $.Values.global.port }}
      weight: 1

    matches:
    - path:
        type: PathPrefix
        value: /v1
      headers:
      - name: target-service-id
        type: Exact
        value: "{{ $service.serviceId }}"

  # Rule for aliases (requires header modification)
  {{- if $service.aliases }}
  - backendRefs:
    - group: ""
      kind: Service
      name: {{ $.Values.global.serviceName }}
      namespace: {{ $.Values.global.namespace }}
      port: {{ $.Values.global.port }}
      weight: 1
    
    filters:
    # Ensure the request header "target-service-id" is set to the authoritative service ID
    - type: RequestHeaderModifier
      requestHeaderModifier:
        set:
        - name: "target-service-id"
          value: "{{ $service.serviceId }}"
        {{- if $.Values.regionName }}
        - name: "Auth-Region"
          value: "{{ $.Values.regionName }}"
        {{- end }}

    matches:
    {{- range $service.aliases }}
    - path:
        type: PathPrefix
        value: /v1
      headers:
      - name: target-service-id
        type: Exact
        value: "{{ . | lower }}"
    {{- end }}
  {{- end }}

{{- end }}