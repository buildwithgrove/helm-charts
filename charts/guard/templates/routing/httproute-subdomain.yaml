# HTTPRoute Generator for Services
#
# Generates an HTTPRoute resource for each service in the `services` list, configuring routing
# based on subdomain patterns (service ID or aliases).
#
# Ref: https://gateway.envoyproxy.io/latest/api/gateway_api/httproute/
#
# Routing behavior:
#   - The `hostnames` field specifies which subdomains will match the request
#   - All matched requests receive a "target-service-id: [SERVICE_ID]" header
#
# Example configuration:
# services:
#   - serviceId: eth
#     aliases:
#       - eth
#       - eth-mainnet
#
# This configuration would match requests to:
#   - https://<ALIAS OR SERVICE_ID>.path.grove.city/v1
# For example:
#   - https://eth.path.grove.city/v1
#   - https://eth-mainnet.path.grove.city/v1
#
# All these requests would receive the header "target-service-id: eth"
#
# -- CONTROLLED TRAFFIC SHIFTING --
# DEV_NOTE: Only subdomain routes split traffic to Middleware as the Middleware
# only supports subdomain service ID routing.
# For example:
#     - https://eth.path.grove.city/v1 will split traffic.
#     - https://path.grove.city/v1 with header "-H target-service-id: eth" will not split traffic.
#
# For more context, see Notion discussion Here:
# https://www.notion.so/buildwithgrove/Traffic-Shifting-Migration-to-PATH-1b2a36edfff6803d8b24e4cafc83fbad?pvs=4#1b5a36edfff680be8dbdeb47647cd3ad
#
{{- $gwname:= default "guard" $.Values.fullnameOverride }}
{{- $name:= include "guard-helm.fullname" . }}

{{- range .Values.services }}
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute

metadata:
  # eg. eth-subdomain-route
  name: {{ .serviceId | lower }}-subdomain-route
  namespace: {{ $.Values.global.namespace }}

spec:
  parentRefs:
  {{- range $.Values.gatewayRef }}
  - group: {{ .group }}
    kind: {{ .kind }}
    name: {{ .name }}
  {{- end }}

  # Match requests based on their subdomain.
  hostnames:
  - "{{ .serviceId | lower }}.{{ $.Values.domain }}"
  {{- if .aliases }}
  {{- range .aliases }}
  - "{{ . | lower }}.{{ $.Values.domain }}"
  {{- end }}
  {{- end }}

  rules:
    # -- CONTROLLED TRAFFIC SHIFTING --
    # Define a default dict for the traffic splitting configuration.
    # This is to prevent nil pointer errors when the traffic splitting
    # configuration is not set for a service.
    {{- $ts := default dict .trafficSplitting }}
    {{- $failover := default dict .failover }}
    - backendRefs:
        # -- FAILOVER CONFIGURATION --
        # If failover is enabled, use Backend resources instead of direct service references
        {{- if eq $failover.enabled true }}
        - group: gateway.envoyproxy.io
          kind: Backend
          name: {{ .serviceId }}-primary
          namespace: {{ $.Values.global.namespace }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ .serviceId }}"
        - group: gateway.envoyproxy.io
          kind: Backend
          name: {{ .serviceId }}-fallback
          namespace: {{ $.Values.global.namespace }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ .serviceId }}"
        {{- else }}
        # -- STANDARD TRAFFIC ROUTING --
        - name: {{ $.Values.global.serviceName }}
          namespace: {{ $.Values.global.namespace }}
          port: {{ $.Values.global.port }}
          # -- CONTROLLED TRAFFIC SHIFTING --
          # If traffic splitting is enabled, set the weight for the PATH backend.
          {{- if eq $ts.enabled true }}
          weight: {{ default 0 $ts.weights.path }}
          {{- end }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ .serviceId }}"
        # -- CONTROLLED TRAFFIC SHIFTING --
        # If traffic splitting is enabled, set a second backendRef for the Middleware backend.
        {{- if eq $ts.enabled true }}
        - name: {{ $.Values.global.shannonBetaServiceName }}
          namespace: {{ $.Values.global.shannonBetaNamespace }}
          port: {{ $.Values.global.shannonBetaPort }}
          weight: {{ default 0 $ts.weights.shannonBeta }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ .serviceId }}"
        - name: {{ $.Values.global.shannonMainnetServiceName }}
          namespace: {{ $.Values.global.shannonMainnetNamespace }}
          port: {{ $.Values.global.shannonMainnetPort }}
          weight: {{ default 0 $ts.weights.shannonMainnet }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ .serviceId }}"
        # Include external endpoints via Backend resources
        {{- $service := . }}
        {{- range $index, $external := $ts.external }}
        {{- if gt (default 0 ($external.weight | int)) 0 }}
        - group: gateway.envoyproxy.io
          kind: Backend
          name: {{ $service.serviceId }}-external-{{ $index }}
          namespace: {{ $.Values.global.namespace }}
          weight: {{ $external.weight | int }}
          filters:
          - type: RequestHeaderModifier
            requestHeaderModifier:
              set:
              - name: target-service-id
                value: "{{ $service.serviceId }}"
          - type: ExtensionRef
            extensionRef:
              group: gateway.envoyproxy.io
              kind: HTTPRouteFilter
              name: {{ $service.serviceId }}-external-{{ $index }}-rewrite
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
      filters:
        - type: RequestHeaderModifier
          requestHeaderModifier:
            set:
              {{- if $.Values.regionName }}
              - name: "Auth-Region"
                value: "{{ $.Values.regionName }}"
              {{- end }}
      matches:
        - path:
            type: PathPrefix
            value: /v1

{{ end }}