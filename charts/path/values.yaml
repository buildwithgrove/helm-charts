nameOverride: path
fullnameOverride: path
global:
  imagePullPolicy: Always
  serviceAccount:
    create: true
    name: path-sa
  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

image:
  repository: ghcr.io/buildwithgrove/path
  # TODO_MVP(@adshmh): change to "latest" once the PATH repo CI's docker image push job is updated to use the correct tag.
  tag: main
  pullPolicy: Always
replicas: 1

path:
  ## HPA cannot be enabled if replicas are declared in the values file. Either use one or the other depending on your needs!
  horizontalPodAutoscaler:
    enabled: false
  resources: {}
    # limits:
    #   memory: 2G
    #   cpu: 4
    # requests:
    #   cpu: 1.8
    #   memory: 800Mi
  ## Port supports the creation of Kubernetes services resources which are tied to the ports
  ## exposed in this configuration.
  ports:
    - name: http
      port: 3069
      protocol: TCP
      service:
        type: ClusterIP
    - name: metrics
      port: 9090
      protocol: TCP
      service:
        type: ClusterIP
  # The PATH service uses the `/healthz` endpoint to check if the service is ready,
  # which uses the response from the QoS service to determine whether to send a
  # 503 (Service Unavailable) or 200 (OK) status code.
  #
  # When using PATH with large numbers of services enabled, the QoS service
  # may take a long time to return a healthy response. Therefore, it is expected
  # that the readinessProbe may take a large number of attempts to succeed.
  readinessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP
  livenessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP
  additionalLabels: {}
  additionalAnnotations: {}
## Configuration for PATH
## PATH requires a config file at /app/config/.config.yaml
## Choose one of the following options to provide this configuration:
config:
  #-- fromSecret configuration is recommended for production deployments 
#-- fromSecret:
#--  name: "path-config-secret"       # Name of the existing Secret
#--  key: ".config.yaml"              # Key in the Secret containing the configuration
  fromSecret: {}

#-- fromConfigMap uses an already existing config map to pass the configuration
#-- fromConfigMap:
#--  name: "path-config-secret"       # Name of the existing ConfigMap
#--  key: ".config.yaml"              # Key in the Secret containing the configuration
  fromConfigMap: {}

# Integrated Observability Stack (WATCH)
observability:
  enabled: true  # Set to false to disable the WATCH chart

  # Configuration passed to the WATCH subchart
  watch:
    # Service details from parent chart for automatic ServiceMonitor configuration
    appServiceDetails:
      name: "{{ .Release.Name }}-metrics"  # This refers to the PATH metrics service name
      port: metrics
      namespace: "{{ .Release.Namespace }}"
    # Configure component monitoring
    dashboards:
      namespace: monitoring
      path:
        enabled: true
        folderName: "PATH"
      guard:
        enabled: false  # Only enable GUARD dashboards if using GUARD
    # ServiceMonitor configuration
    serviceMonitors:
      namespace: monitoring
      path:
        enabled: true
        selector:
          matchLabels:
            app.kubernetes.io/name: path
        endpoints:
          - port: metrics
            interval: 15s
            path: /metrics
      guard:
        enabled: false  # Only enable GUARD monitoring if using GUARD
    # External monitoring configuration (used when kube-prometheus-stack.enabled=false)
    externalMonitoring:
      grafanaNamespace: "monitoring"
      prometheusSelectorLabels:
        app.kubernetes.io/part-of: watch-monitoring
logs:
  level: info
  format: plain
