# NOTE: this file contains examples of all values needed to deploy PATH.
# It is also used to generate a table using helm-docs for the PATH chart.
# See:
#   - https://github.com/norwoodj/helm-docs
#
# To regenerate the table from this file, run:
#   make generate_helm_values_docs
#
# To view the table in the PATH documentation, see:
#   - https://path.grove.city/operate/helm/values

# ----------------------------------------------------------------------
# PATH Specific Configurations
# ----------------------------------------------------------------------
nameOverride: path
fullnameOverride: path
global:
  imagePullPolicy: IfNotPresent
  serviceAccount:
    create: true
    name: "path-sa"
  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

image:
  repository: ghcr.io/buildwithgrove/path
  # TODO_MVP(@adshmh):
  # - Change to "latest" once PATH repo CI's docker image push job is updated to use the correct tag.
  tag: main
  pullPolicy: Always
replicas: 1

path:
  # IMPORTANT:
  # - HPA cannot be enabled if replicas are declared in the values file.
  # - Use either HPA or replicas, not both, depending on your needs.
  horizontalPodAutoscaler:
    enabled: false
  resources:
    {}
    # limits:
    #   memory: 2G
    #   cpu: 4
    # requests:
    #   cpu: 1.8
    #   memory: 800Mi
  # Ports:
  # - Used to create Kubernetes service resources tied to the ports exposed below.
  ports:
    - name: http
      port: 3069
      protocol: TCP
      service:
        type: ClusterIP
    - name: metrics
      port: 9090
      protocol: TCP
      service:
        type: ClusterIP
  # Health Checks:
  # - PATH uses `/healthz` endpoint for readiness/liveness.
  # - Response depends on QoS service status:
  #   - 503 (Service Unavailable) or 200 (OK).
  # - If many services are enabled, QoS may take longer to report healthy.
  # - Expect readinessProbe to require many attempts in such cases.
  readinessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP
  livenessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP
  additionalLabels: {}
  additionalAnnotations: {}
# PATH Configuration
# - Requires config file at /app/config/.config.yaml
# - Choose one of the following options to provide this configuration:
config:
  # TODO_FUTURE(@HebertCL):
  # - Consider dropping the enabled field and using fromSecret/fromConfig fields if defined.
  #
  # Option 1: Use an existing Secret (recommended for security)
  fromSecret:
    enabled: false
    # name: "path-config-secret"       # Name of the existing Secret
    # key: ".config.yaml"              # Key in the Secret containing the configuration

  # Option 2: Use an existing ConfigMap
  fromConfigMap:
    enabled: false
    # name: "path-config"              # Name of the existing ConfigMap
    # key: ".config.yaml"              # Key in the ConfigMap containing the configuration

# Additional manifests:
# - Use to include resources not provided by the chart itself.
# - Allows management of those resources within the chart.
additionalManifests: []
additionalYamlManifests: ""

# ----------------------------------------------------------------------
# GUARD Specific Configurations
# ----------------------------------------------------------------------

guard:
  enabled: true

  # ---- Envoy Gateway ----
  # Envoy Gateway:
  # - Configure gateway-helm dependency here.
  # - Uncomment `gateway-helm` to specify configuration.
  # - Values below override gateway-helm defaults.
  # - References:
  #   - https://github.com/envoyproxy/gateway/tree/main/charts/gateway-helm#values
  #   - https://github.com/envoyproxy/gateway/blob/main/charts/gateway-helm/values.tmpl.yaml
  gateway-helm:
    config:
      envoyGateway:
        # Rate Limiting:
        # - Required to enable rate limiting.
        # - Updates Envoy Gateway config to use Redis as backend.
        rateLimit:
          backend:
            type: Redis
            redis:
              url: redis:6379

  fullnameOverride: guard
  global:
    # PATH Service:
    # - serviceName: Name of the PATH service deployed.
    # - port: Cluster port for PATH service (forwarded by Envoy Gateway).
    # CONTROLLED TRAFFIC SHIFTING:
    # - shannonServiceName: Name of Middleware Service in same namespace as PATH/GUARD.
    # - shannonPort: Cluster port for Middleware service (forwarded by Envoy Gateway).
    serviceName: path-http
    port: 3069
    shannonServiceName: middleware-http
    shannonPort: 3000
  gateway:
    # Envoy Gateway listen port
    port: 3070

  # ---- Service routing settings ----

  # Domain:
  # - Used for matching HTTPRoutes by subdomain (see `httproute-subdomain.yaml`).
  # - Hostnames created as `<SERVICE_ID>.localhost`.
  domain: localhost
  # IMPORTANT:
  # - For production, override `domain` with actual PATH service domain.

  # Services:
  # - List of services routed by Envoy Gateway to PATH backend.
  # - Used to construct HTTPRoutes for each service.
  # - All enabled services for PATH deployment must be listed here.
  services:
    # Configurations:
    # - serviceId [REQUIRED]: Authoritative service ID.
    # - aliases [OPTIONAL]: Aliases for the service.
    # Examples:
    #   - anvil.localhost -> target-service-id: anvil
    #   - F00C.path.grove.city -> target-service-id: F00C
    #   - eth.path.grove.city -> target-service-id: F00C
    #   - polygon.path.grove.city -> target-service-id: F021

    # Shannon Example Service ID (with no aliases)
    - serviceId: anvil

    # Morse Example Service IDs (with aliases)
    - serviceId: F00C
      shannonServiceId: eth
      aliases:
        - eth
        - eth-mainnet
      # -- CONTROLLED TRAFFIC SHIFTING --
      # Provide configuration for splitting traffic between
      # the PATH and Middleware backends.
      trafficSplitting:
        enabled: false
        weights:
          path: 50
          middleware: 50
    - serviceId: F021
      aliases:
        - polygon
        - polygon-mainnet
      # -- CONTROLLED TRAFFIC SHIFTING --
      # Provide configuration for splitting traffic between
      # the PATH and Middleware backends.
      trafficSplitting:
        enabled: false
        weights:
          path: 50
          middleware: 50

  # GUARD Authorization Flows:
  # - Supported: API Key, Grove Legacy (not shown below)
  # TODO_IMPROVE(@commoddity):
  # - Add support for additional flows (e.g., JWT, OIDC, Basic Auth, etc.)

  # Authorization Type:
  # - Supported: `apiKey`, `groveLegacy` (default: `apiKey`)
  auth:
    # -- Configuration for the API key authorization flow.
    apiKey:
      # API Key Auth:
      # - enabled: Enable API key authentication.
      # - headerKey: Header for API key.
      # - apiKeys: List of authorized API keys.
      #   - Default provided for local development.
      #   - IMPORTANT: Override in production with actual API keys.
      enabled: true
      headerKey: authorization
      apiKeys:
        - test_api_key

# ----------------------------------------------------------------------
# WATCH (Integrated Observability Stack) Specific Configurations
# ----------------------------------------------------------------------

# Integrated Observability Stack (WATCH):
observability:
  # Set to false to disable the WATCH chart
  enabled: true

  # Configuration passed to the WATCH subchart
  watch:
    # Service details for automatic ServiceMonitor configuration
    appServiceDetails:
      name: "{{ .Release.Name }}-metrics" # Refers to PATH metrics service name
      port: metrics
      namespace: "{{ .Release.Namespace }}"
    # Component Monitoring Dashboards
    dashboards:
      namespace: monitoring
      path:
        enabled: true
        folderName: "PATH"
      guard:
        # Only enable GUARD dashboards if using GUARD
        enabled: false
    # ServiceMonitor Configuration
    serviceMonitors:
      namespace: monitoring
      path:
        enabled: true
        selector:
          matchLabels:
            app.kubernetes.io/name: path
        endpoints:
          - port: metrics
            interval: 15s
            path: /metrics
      guard:
        # Only enable GUARD monitoring if using GUARD
        enabled: false
    # External Monitoring (when kube-prometheus-stack.enabled=false)
    externalMonitoring:
      grafanaNamespace: "monitoring"
      prometheusSelectorLabels:
        app.kubernetes.io/part-of: watch-monitoring
logs:
  level: info
  format: plain
