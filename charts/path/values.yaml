##########################################################################
# -------------------- PATH Specific Configurations -------------------- #
##########################################################################
nameOverride: path
fullnameOverride: path
global:
  imagePullPolicy: IfNotPresent
  serviceAccount:
    create: true
    name: "path-sa"
  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001

image:
  repository: ghcr.io/buildwithgrove/path
  # TODO_MVP(@adshmh): change to "latest" once the PATH repo CI's docker image push job is updated to use the correct tag.
  tag: main
  pullPolicy: IfNotPresent
replicas: 1

path:
  # Only one of the following can be enabled at a time:
  # - horizontalPodAutoscaler
  # - replicas
  # Either use one or the other depending on your needs!
  # horizontalPodAutoscaler:
  #   enabled: false
  replicas: 1
  # Default resources for PATH are provided here as a baseline for local development.
  #
  # IMPORTANT: For production deployments, it is recommended to set the resources to the
  # appropriate values for the target environment using a `values.yaml` file.
  # The default values provided here are LOW and are not recommended for production deployments.
  resources:
    limits:
      memory: 2G
      cpu: 4
    requests:
      cpu: 1.8
      memory: 800Mi
  ## Port supports the creation of Kubernetes services resources which are tied to the ports
  ## exposed in this configuration.
  ports:
    - name: http
      port: 3069
      protocol: TCP
      service:
        type: ClusterIP
    - name: metrics
      port: 9090
      protocol: TCP
      service:
        type: ClusterIP
  #     annotations: #{}
  #       cloud.google.com/neg: '{"ingress": true}'
  #   ingress:
  #     annotations: #{}
  #       kubernetes.io/ingress.class: "gce"
  #       cert-manager.io/cluster-issuer: letscrypt-prod
  #       cloud.google.com/backend-config: "health-check-config"
  #     hosts:
  #       - host: "path.example.org"
  #         paths:
  #           - path: /
  #             pathType: Prefix
  #     tls:
  #       - secretName: my-ingress-secret
  #         hosts:
  #           - "path.example.org"
  ## Container probes and lifecycle configurations
  # lifecycle: ""
  # startupProbe: {}

  # The PATH service uses the `/healthz` endpoint to check if the service is ready,
  # which uses the response from the QoS service to determine whether to send a
  # 503 (Service Unavailable) or 200 (OK) status code.
  #
  # When using PATH with large numbers of services enabled, the QoS service
  # may take a long time to return a healthy response. Therefore, it is expected
  # that the readinessProbe may take a large number of attempts to succeed.
  readinessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP
  livenessProbe:
    failureThreshold: 600 # Set to high value to account for the potential long response time of the QoS service.
    httpGet:
      path: /healthz
      port: 3069
      scheme: HTTP

  ## Deployment specific configurations. Depending on the needs of your workload
  ## you can uncomment and setup the values below.
  # terminationGracePeriodSeconds: 10
  # affinity:
  #   nodeAffinity:
  #       requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #           - matchExpressions:
  #               - key: cloud.google.com/gke-nodepool
  #                 operator: In
  #                 values:
  #                   - gke-n2-standard-16

  # tolerations: []
  # nodeSelector: {}
  # topologySpreadConstraints: []
  # dnsPolicy: ""
  # dnsConfig: ""
  # imagePullSecrets:
  #   - pull-secret1
  #   - pull-secret2
  ## Additional labels and annotations map values for labels and annotations
  ## for all the resources.
  additionalLabels: {}
  # applicationLabel: my-label
  additionalAnnotations: {}
  # kubernetes.io/annotation: some-annotation

  ## Path supports mounting volumes, secrets and configmaps.
  ## Depending on the users' needs, any of the following can be used to mount Path's configuration
  ## within the container. Below can be found the 3 available options to be used.
  #
  # Whatever option you choose, the config fileby default must be mounted at `/app/config/.config.yaml`.
  # This may optionally be overridden with the `--config` flag when starting the PATH service.
  mountSecrets:
    - name: path-config
      mountPath: /app/config/.config.yaml
      subPath: .config.yaml
      items:
        - key: .config.yaml
          path: .config.yaml
# mountConfigMaps:
#   - name: path-config
#     mountPath: /app/config
#   items:
#     - item1
#     - item2
# persistence:
#   volumeClaimTemplates:
#     volumeMountPath: ""

## Additional manifests and additional yaml manifests provide the ability to include
## resources which are not provided by the chart itself. This allow to manage those
## resources within the chart itself.
additionalManifests: []
additionalYamlManifests: ""

###########################################################################
# -------------------- GUARD Specific Configurations -------------------- #
###########################################################################
guard:
  # TODO_DOCUMENT(@commoddity): Embed the `gateway-helm` values.yaml fields
  # referenced below into the `guard` section of the Docusaurus docs.

  # ---- Envoy Gateway ----
  # This section can be used to configure gateway-helm dependency.
  # Uncomment `gateway-helm` below to specify a gateway-helm configuration.
  # Any values from the below `gateway-helm` reference will override the default values.
  #
  # References:
  # - https://github.com/envoyproxy/gateway/tree/main/charts/gateway-helm#values
  # - https://github.com/envoyproxy/gateway/blob/main/charts/gateway-helm/values.tmpl.yaml
  # gateway-helm:
  #   # For example, the default log level may be overridden to `warn` as follows:
  #   config:
  #     envoyGateway:
  #       logging:
  #         level:
  #           default: warn

  fullnameOverride: guard
  global:
    # -- The name of the service that the PATH service is deployed to.
    serviceName: path-http
    # -- The port that the PATH service runs on in the cluster.
    # This is the port that Envoy Gateway will forward requests to.
    port: 3069
  gateway:
    # -- Whether to deploy the Envoy Gateway resource (should always be true)
    enabled: true
    # -- The port that Envoy Gateway will listen on.
    port: 3070

  # ---- Service routing settings ----

  # -- domain will be used for matching HTTPRoutes by subdomain,
  # as defined in the `httproute-subdomain.yaml` template.
  # For example, hostnames will be created for `<SERVICE_ID>.localhost`.
  domain: localhost
  # IMPORTANT: For production deployments, the `domain` field should be
  # overridden with the actual domain name for the PATH service.

  # -- List of services that will be routed by Envoy Gateway to the PATH backend.
  # These services will be used to construct HTTPRoutes for each service. All
  # services enabled for a PATH deployment must be listed here.
  services:
    # Configurations:
    # - serviceId [REQUIRED]: The authorative service ID of the service.
    # - aliases [OPTIONAL]: A list of aliases for the service.
    #
    # For example:
    # - anvil.localhost -> "target-service-id: anvil"
    # - F00C.path.grove.city -> "target-service-id: F00C"
    # - eth.path.grove.city -> "target-service-id: F00C"
    # - polygon.path.grove.city -> "target-service-id: F021"

    # Shannon Example Service ID (with no aliases)
    # @ignored
    - serviceId: anvil

    # Morse Example Service IDs (with aliases)
    # @ignored
    - serviceId: F00C
      aliases:
        - eth
        - eth-mainnet
    # @ignored
    - serviceId: F021
      aliases:
        - polygon
        - polygon-mainnet

  # GUARD may be configured to use one or more authorization flows.
  # The following authorization flows are supported:
  # - API Key
  # - Grove Legacy (not shown in the below config)
  # TODO_IMPROVE(@commoddity): Add support for additional authorization flows.
  # For example, JWT, OIDC, Basic Auth, etc.

  # -- The type of authorization flow to use. Currently supports `apiKey` and `groveLegacy`.
  # `apiKey` is enabled by default.
  auth:
    # -- Configuration for the API key authorization flow.
    apiKey:
      # -- Whether to enable API key authentication.
      enabled: true
      # -- The header key to use for API key authentication.
      headerKey: authorization
      # -- An array of API keys authorized to access the PATH service.
      # A default API key is provided for local development.
      # IMPORTANT: For production deployments, the `apiKeys` field should be
      # overridden with the actual API keys authorized to access the PATH service.
      apiKeys:
        # @ignored
        - test_api_key

####################################################################
# ------------ TODO: Review below chart configuration ------------ #
####################################################################
---
# TODO_MVP(@HebertCL @adshmh): Review below chart configuration and decide they are needed
# and where to place it within the chart with its respective description.
# Adding an example at the end for reference
serviceMonitor:
  enabled: false

logs:
  level: info
  format: plain

development:
  delve:
    enabled: false
    laddr: :40004

prod:
  enabled: false
  namespace: ""
scripts:
  enabled: true

pathConfig:
  {}
  # ## Change log level from chart so it gets reflected in an env variable
  # ## This value defaults to info
  # logs:
  #   level: info
  #   format: plain
  # ## TODO_MVP(@adshmh): Unsure what this config is for. Appreciate a description from your end.
  # development:
  #   delve:
  #     enabled: false
  #     laddr: :40004
  # ## TODO_MVP(@adshmh): Unsure what this config is for. Appreciate a description from your end.
  # prod:
  #   enabled: false
  #   namespace: ""
  # ## TODO_MVP(@adshmh): Unsure what this config is for. Appreciate a description from your end.
  # scripts:
  #   enabled: true
  # ## TODO_MVP(@adshmh): Do we want/need/plan to add Prometheus.
  # serviceMonitor:
  #   enabled: false
