name: Release Charts
on:
  push:
    branches:
      - main
    paths:
      - 'charts/**'

jobs:
  release-charts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      
      - name: Install Helm
        uses: azure/setup-helm@v3
      
      - name: Add Helm repos
        run: |
          # Add commonly used Helm repositories
          helm repo add stable https://charts.helm.sh/stable
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
      
      - name: Install chart-releaser
        run: |
          mkdir -p .cr-release-packages
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.6.0/chart-releaser_1.6.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz
          chmod +x cr
          sudo mv cr /usr/local/bin/cr
      
      - name: Check for chart changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            guard:
              - 'charts/guard/**'
            watch:
              - 'charts/watch/**'
            path:
              - 'charts/path/**'
      
      - name: Debug chart changes
        run: |
          echo "Guard changed: ${{ steps.filter.outputs.guard }}"
          echo "Watch changed: ${{ steps.filter.outputs.watch }}"
          echo "Path changed: ${{ steps.filter.outputs.path }}"
      
      # Release guard chart (if changed)
      - name: Release guard chart
        if: steps.filter.outputs.guard == 'true'
        run: |
          echo "Releasing guard chart..."
          
          # Create clean directory for this release
          rm -rf .cr-release-packages-guard
          mkdir -p .cr-release-packages-guard
          
          # Build dependencies and package
          helm dependency build charts/guard
          helm package charts/guard -d .cr-release-packages-guard
          
          # Create GitHub release and update index
          cr upload -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -p .cr-release-packages-guard || true
          cr index -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -c https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ -i index.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      # Wait between releases
      - name: Wait after guard release
        if: steps.filter.outputs.guard == 'true'
        run: sleep 10
      
      # Release watch chart (if changed)
      - name: Release watch chart
        if: steps.filter.outputs.watch == 'true'
        run: |
          echo "Releasing watch chart..."
          
          # Create clean directory for this release
          rm -rf .cr-release-packages-watch
          mkdir -p .cr-release-packages-watch
          
          # Build dependencies and package
          helm dependency build charts/watch
          helm package charts/watch -d .cr-release-packages-watch
          
          # Create GitHub release and update index
          cr upload -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -p .cr-release-packages-watch || true
          cr index -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -c https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ -i index.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      
      # Wait between releases
      - name: Wait after watch release
        if: steps.filter.outputs.watch == 'true'
        run: sleep 10
      
      # Release path chart (if changed)
      - name: Release path chart
        if: steps.filter.outputs.path == 'true'
        run: |
          echo "Releasing path chart..."
          
          # Create clean directory for this release
          rm -rf .cr-release-packages-path
          mkdir -p .cr-release-packages-path
          
          # Build dependencies and package
          helm dependency build charts/path
          helm package charts/path -d .cr-release-packages-path
          
          # Create GitHub release and update index
          cr upload -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -p .cr-release-packages-path || true
          cr index -o "${{ github.repository_owner }}" -r "${{ github.event.repository.name }}" -c https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/ -i index.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
